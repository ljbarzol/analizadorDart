Tokens de algoritmo1.dart:
LexToken(IMPORT,'import',7,238)
LexToken(STRING_LITERAL,[('str', 'dart:io')],7,245)
LexToken(SEMICOLON,';',7,254)
LexToken(CONST,'const',8,256)
LexToken(INT,'int',8,262)
LexToken(ID,'LIMITE_SUPERIOR',8,266)
LexToken(EQUALS,'=',8,282)
LexToken(NUMBER,20,8,284)
LexToken(SEMICOLON,';',8,286)
LexToken(INT,'int',9,335)
LexToken(ID,'calcularFactorialIterativo',9,339)
LexToken(LPAREN,'(',9,365)
LexToken(INT,'int',9,366)
LexToken(ID,'n',9,370)
LexToken(RPAREN,')',9,371)
LexToken(LBRACE,'{',9,373)
LexToken(IF,'if',10,377)
LexToken(LPAREN,'(',10,380)
LexToken(ID,'n',10,381)
LexToken(MINSIGN,'<',10,383)
LexToken(NUMBER,0,10,385)
LexToken(RPAREN,')',10,386)
LexToken(THROW,'throw',10,388)
LexToken(ID,'ArgumentError',10,394)
LexToken(LPAREN,'(',10,407)
LexToken(STRING_LITERAL,[('str', 'El número no puede ser negativo')],10,408)
LexToken(RPAREN,')',10,441)
LexToken(SEMICOLON,';',10,442)
LexToken(INT,'int',11,446)
LexToken(ID,'resultado',11,450)
LexToken(EQUALS,'=',11,460)
LexToken(NUMBER,1,11,462)
LexToken(SEMICOLON,';',11,463)
LexToken(FOR,'for',12,467)
LexToken(LPAREN,'(',12,471)
LexToken(INT,'int',12,472)
LexToken(ID,'i',12,476)
LexToken(EQUALS,'=',12,478)
LexToken(NUMBER,2,12,480)
LexToken(SEMICOLON,';',12,481)
LexToken(ID,'i',12,483)
LexToken(MINSIGNEQ,'<=',12,485)
LexToken(ID,'n',12,488)
LexToken(SEMICOLON,';',12,489)
LexToken(ID,'i',12,491)
LexToken(PLUSPLUS,'++',12,492)
LexToken(RPAREN,')',12,494)
LexToken(LBRACE,'{',12,496)
LexToken(ID,'resultado',13,502)
LexToken(TIMESEQ,'*=',13,512)
LexToken(ID,'i',13,515)
LexToken(SEMICOLON,';',13,516)
LexToken(RBRACE,'}',14,520)
LexToken(RETURN,'return',15,524)
LexToken(ID,'resultado',15,531)
LexToken(SEMICOLON,';',15,540)
LexToken(RBRACE,'}',16,542)
LexToken(INT,'int',17,544)
LexToken(ID,'calcularFactorialRecursivo',17,548)
LexToken(LPAREN,'(',17,574)
LexToken(INT,'int',17,575)
LexToken(ID,'n',17,579)
LexToken(RPAREN,')',17,580)
LexToken(LBRACE,'{',17,582)
LexToken(IF,'if',18,586)
LexToken(LPAREN,'(',18,589)
LexToken(ID,'n',18,590)
LexToken(MINSIGN,'<',18,592)
LexToken(NUMBER,0,18,594)
LexToken(RPAREN,')',18,595)
LexToken(THROW,'throw',18,597)
LexToken(ID,'ArgumentError',18,603)
LexToken(LPAREN,'(',18,616)
LexToken(STRING_LITERAL,[('str', 'El número no puede ser negativo')],18,617)
LexToken(RPAREN,')',18,650)
LexToken(SEMICOLON,';',18,651)
LexToken(IF,'if',19,655)
LexToken(LPAREN,'(',19,658)
LexToken(ID,'n',19,659)
LexToken(EQEQ,'==',19,661)
LexToken(NUMBER,0,19,664)
LexToken(OR,'||',19,666)
LexToken(ID,'n',19,669)
LexToken(EQEQ,'==',19,671)
LexToken(NUMBER,1,19,674)
LexToken(RPAREN,')',19,675)
LexToken(RETURN,'return',19,677)
LexToken(NUMBER,1,19,684)
LexToken(SEMICOLON,';',19,685)
LexToken(RETURN,'return',20,689)
LexToken(ID,'n',20,696)
LexToken(TIMES,'*',20,698)
LexToken(ID,'calcularFactorialRecursivo',20,700)
LexToken(LPAREN,'(',20,726)
LexToken(ID,'n',20,727)
LexToken(MINUS,'-',20,729)
LexToken(NUMBER,1,20,731)
LexToken(RPAREN,')',20,732)
LexToken(SEMICOLON,';',20,733)
LexToken(RBRACE,'}',21,735)
LexToken(BOOL,'bool',22,737)
LexToken(ID,'validarEntrada',22,742)
LexToken(LPAREN,'(',22,756)
LexToken(DYNAMIC,'dynamic',22,757)
LexToken(ID,'valor',22,765)
LexToken(RPAREN,')',22,770)
LexToken(LBRACE,'{',22,772)
LexToken(IF,'if',23,776)
LexToken(LPAREN,'(',23,779)
LexToken(ID,'valor',23,780)
LexToken(IS,'is',23,786)
LexToken(NOT,'!',23,788)
LexToken(INT,'int',23,790)
LexToken(RPAREN,')',23,793)
LexToken(RETURN,'return',23,795)
LexToken(FALSE,'false',23,802)
LexToken(SEMICOLON,';',23,807)
LexToken(RETURN,'return',24,811)
LexToken(ID,'valor',24,818)
LexToken(MAXSIGNEQ,'>=',24,824)
LexToken(NUMBER,0,24,827)
LexToken(AND,'&&',24,829)
LexToken(ID,'valor',24,832)
LexToken(MINSIGNEQ,'<=',24,838)
LexToken(ID,'LIMITE_SUPERIOR',24,841)
LexToken(SEMICOLON,';',24,856)
LexToken(RBRACE,'}',25,858)
LexToken(VOID,'void',26,860)
LexToken(ID,'mostrarResultado',26,865)
LexToken(LPAREN,'(',26,881)
LexToken(INT,'int',26,882)
LexToken(ID,'numero',26,886)
LexToken(COMMA,',',26,892)
LexToken(INT,'int',26,894)
LexToken(ID,'resultado',26,898)
LexToken(RPAREN,')',26,907)
LexToken(LBRACE,'{',26,909)
LexToken(PRINT,'print',27,913)
LexToken(LPAREN,'(',27,918)
LexToken(STRING_LITERAL,[('str', 'El factorial de '), ('var', 'numero'), ('str', ' es '), ('var', 'resultado'), ('str', '')],27,919)
LexToken(RPAREN,')',27,958)
LexToken(SEMICOLON,';',27,959)
LexToken(RBRACE,'}',28,961)
LexToken(VOID,'void',29,963)
LexToken(MAIN,'main',29,968)
LexToken(LPAREN,'(',29,972)
LexToken(RPAREN,')',29,973)
LexToken(LBRACE,'{',29,975)
LexToken(PRINT,'print',30,979)
LexToken(LPAREN,'(',30,984)
LexToken(STRING_LITERAL,[('str', 'Ingrese un número entero positivo (máximo '), ('var', 'LIMITE_SUPERIOR'), ('str', '):')],30,985)
LexToken(RPAREN,')',30,1047)
LexToken(SEMICOLON,';',30,1048)
LexToken(STRING,'String',31,1052)
LexToken(QMARK,'?',31,1058)
LexToken(ID,'entrada',31,1060)
LexToken(EQUALS,'=',31,1068)
LexToken(ID,'stdin',31,1070)
LexToken(DOT,'.',31,1075)
LexToken(ID,'readLineSync',31,1076)
LexToken(LPAREN,'(',31,1088)
LexToken(RPAREN,')',31,1089)
LexToken(SEMICOLON,';',31,1090)
LexToken(TRY,'try',32,1094)
LexToken(LBRACE,'{',32,1098)
LexToken(INT,'int',33,1104)
LexToken(ID,'numero',33,1108)
LexToken(EQUALS,'=',33,1115)
LexToken(INT,'int',33,1117)
LexToken(DOT,'.',33,1120)
LexToken(ID,'parse',33,1121)
LexToken(LPAREN,'(',33,1126)
LexToken(ID,'entrada',33,1127)
LexToken(NULLCOALESCING,'??',33,1135)
LexToken(STRING_LITERAL,[('str', '0')],33,1138)
LexToken(RPAREN,')',33,1141)
LexToken(SEMICOLON,';',33,1142)
LexToken(IF,'if',34,1148)
LexToken(LPAREN,'(',34,1151)
LexToken(NOT,'!',34,1152)
LexToken(ID,'validarEntrada',34,1153)
LexToken(LPAREN,'(',34,1167)
LexToken(ID,'numero',34,1168)
LexToken(RPAREN,')',34,1174)
LexToken(RPAREN,')',34,1175)
LexToken(LBRACE,'{',34,1177)
LexToken(PRINT,'print',35,1185)
LexToken(LPAREN,'(',35,1190)
LexToken(STRING_LITERAL,[('str', 'Número inválido. Intente nuevamente con un entero entre 0 y '), ('var', 'LIMITE_SUPERIOR'), ('str', '.')],35,1191)
LexToken(RPAREN,')',35,1270)
LexToken(SEMICOLON,';',35,1271)
LexToken(RETURN,'return',36,1279)
LexToken(SEMICOLON,';',36,1285)
LexToken(RBRACE,'}',37,1291)
LexToken(INT,'int',38,1297)
LexToken(ID,'resultadoIterativo',38,1301)
LexToken(EQUALS,'=',38,1320)
LexToken(ID,'calcularFactorialIterativo',38,1322)
LexToken(LPAREN,'(',38,1348)
LexToken(ID,'numero',38,1349)
LexToken(RPAREN,')',38,1355)
LexToken(SEMICOLON,';',38,1356)
LexToken(INT,'int',39,1362)
LexToken(ID,'resultadoRecursivo',39,1366)
LexToken(EQUALS,'=',39,1385)
LexToken(ID,'calcularFactorialRecursivo',39,1387)
LexToken(LPAREN,'(',39,1413)
LexToken(ID,'numero',39,1414)
LexToken(RPAREN,')',39,1420)
LexToken(SEMICOLON,';',39,1421)
LexToken(IF,'if',40,1423)
LexToken(LPAREN,'(',40,1426)
LexToken(ID,'resultadoIterativo',40,1427)
LexToken(NEQ,'!=',40,1446)
LexToken(ID,'resultadoRecursivo',40,1449)
LexToken(RPAREN,')',40,1467)
LexToken(LBRACE,'{',40,1469)
LexToken(PRINT,'print',41,1477)
LexToken(LPAREN,'(',41,1482)
LexToken(STRING_LITERAL,[('str', '¡Alerta! Los métodos iterativo y recursivo no coinciden.')],41,1483)
LexToken(RPAREN,')',41,1541)
LexToken(SEMICOLON,';',41,1542)
LexToken(RBRACE,'}',42,1548)
LexToken(ELSE,'else',42,1550)
LexToken(LBRACE,'{',42,1555)
LexToken(ID,'mostrarResultado',43,1563)
LexToken(LPAREN,'(',43,1579)
LexToken(ID,'numero',43,1580)
LexToken(COMMA,',',43,1586)
LexToken(ID,'resultadoIterativo',43,1588)
LexToken(RPAREN,')',43,1606)
LexToken(SEMICOLON,';',43,1607)
LexToken(RBRACE,'}',44,1613)
LexToken(RBRACE,'}',45,1615)
LexToken(CATCH,'catch',45,1617)
LexToken(LPAREN,'(',45,1623)
LexToken(ID,'e',45,1624)
LexToken(RPAREN,')',45,1625)
LexToken(LBRACE,'{',45,1627)
LexToken(PRINT,'print',46,1633)
LexToken(LPAREN,'(',46,1638)
LexToken(STRING_LITERAL,[('str', 'Error de entrada: '), ('var', 'e'), ('str', '')],46,1639)
LexToken(RPAREN,')',46,1661)
LexToken(SEMICOLON,';',46,1662)
LexToken(RBRACE,'}',47,1666)
LexToken(RBRACE,'}',49,1669)
