Tokens de algoritmo1.dart:
LexToken(IMPORT,'import',7,238)
LexToken(STRING_LITERAL,[('str', 'dart:io')],7,245)
LexToken(SEMICOLON,';',7,254)
LexToken(CONST,'const',8,256)
LexToken(INT,'int',8,262)
LexToken(ID,'LIMITE_SUPERIOR',8,266)
LexToken(EQUALS,'=',8,282)
LexToken(NUMBER,20,8,284)
LexToken(SEMICOLON,';',8,286)
LexToken(INT,'int',10,336)
LexToken(ID,'calcularFactorialIterativo',10,340)
LexToken(LPAREN,'(',10,366)
LexToken(INT,'int',10,367)
LexToken(ID,'n',10,371)
LexToken(RPAREN,')',10,372)
LexToken(LBRACE,'{',10,374)
LexToken(IF,'if',11,378)
LexToken(LPAREN,'(',11,381)
LexToken(ID,'n',11,382)
LexToken(MINSIGN,'<',11,384)
LexToken(NUMBER,0,11,386)
LexToken(RPAREN,')',11,387)
LexToken(THROW,'throw',11,389)
LexToken(ID,'ArgumentError',11,395)
LexToken(LPAREN,'(',11,408)
LexToken(STRING_LITERAL,[('str', 'El número no puede ser negativo')],11,409)
LexToken(RPAREN,')',11,442)
LexToken(SEMICOLON,';',11,443)
LexToken(INT,'int',12,447)
LexToken(ID,'resultado',12,451)
LexToken(EQUALS,'=',12,461)
LexToken(NUMBER,1,12,463)
LexToken(SEMICOLON,';',12,464)
LexToken(FOR,'for',13,468)
LexToken(LPAREN,'(',13,472)
LexToken(INT,'int',13,473)
LexToken(ID,'i',13,477)
LexToken(EQUALS,'=',13,479)
LexToken(NUMBER,2,13,481)
LexToken(SEMICOLON,';',13,482)
LexToken(ID,'i',13,484)
LexToken(MINSIGNEQ,'<=',13,486)
LexToken(ID,'n',13,489)
LexToken(SEMICOLON,';',13,490)
LexToken(ID,'i',13,492)
LexToken(PLUSPLUS,'++',13,493)
LexToken(RPAREN,')',13,495)
LexToken(LBRACE,'{',13,497)
LexToken(ID,'resultado',14,503)
LexToken(TIMESEQ,'*=',14,513)
LexToken(ID,'i',14,516)
LexToken(SEMICOLON,';',14,517)
LexToken(RBRACE,'}',15,521)
LexToken(RETURN,'return',16,525)
LexToken(ID,'resultado',16,532)
LexToken(SEMICOLON,';',16,541)
LexToken(RBRACE,'}',17,543)
LexToken(INT,'int',19,546)
LexToken(ID,'calcularFactorialRecursivo',19,550)
LexToken(LPAREN,'(',19,576)
LexToken(INT,'int',19,577)
LexToken(ID,'n',19,581)
LexToken(RPAREN,')',19,582)
LexToken(LBRACE,'{',19,584)
LexToken(IF,'if',20,588)
LexToken(LPAREN,'(',20,591)
LexToken(ID,'n',20,592)
LexToken(MINSIGN,'<',20,594)
LexToken(NUMBER,0,20,596)
LexToken(RPAREN,')',20,597)
LexToken(THROW,'throw',20,599)
LexToken(ID,'ArgumentError',20,605)
LexToken(LPAREN,'(',20,618)
LexToken(STRING_LITERAL,[('str', 'El número no puede ser negativo')],20,619)
LexToken(RPAREN,')',20,652)
LexToken(SEMICOLON,';',20,653)
LexToken(IF,'if',21,657)
LexToken(LPAREN,'(',21,660)
LexToken(ID,'n',21,661)
LexToken(EQEQ,'==',21,663)
LexToken(NUMBER,0,21,666)
LexToken(OR,'||',21,668)
LexToken(ID,'n',21,671)
LexToken(EQEQ,'==',21,673)
LexToken(NUMBER,1,21,676)
LexToken(RPAREN,')',21,677)
LexToken(RETURN,'return',21,679)
LexToken(NUMBER,1,21,686)
LexToken(SEMICOLON,';',21,687)
LexToken(RETURN,'return',22,691)
LexToken(ID,'n',22,698)
LexToken(TIMES,'*',22,700)
LexToken(ID,'calcularFactorialRecursivo',22,702)
LexToken(LPAREN,'(',22,728)
LexToken(ID,'n',22,729)
LexToken(MINUS,'-',22,731)
LexToken(NUMBER,1,22,733)
LexToken(RPAREN,')',22,734)
LexToken(SEMICOLON,';',22,735)
LexToken(RBRACE,'}',23,737)
LexToken(BOOL,'bool',25,740)
LexToken(ID,'validarEntrada',25,745)
LexToken(LPAREN,'(',25,759)
LexToken(DYNAMIC,'dynamic',25,760)
LexToken(ID,'valor',25,768)
LexToken(RPAREN,')',25,773)
LexToken(LBRACE,'{',25,775)
LexToken(IF,'if',26,779)
LexToken(LPAREN,'(',26,782)
LexToken(ID,'valor',26,783)
LexToken(IS,'is',26,789)
LexToken(NOT,'!',26,791)
LexToken(INT,'int',26,793)
LexToken(RPAREN,')',26,796)
LexToken(RETURN,'return',26,798)
LexToken(ID,'false',26,805)
LexToken(SEMICOLON,';',26,810)
LexToken(RETURN,'return',27,814)
LexToken(ID,'valor',27,821)
LexToken(MAXSIGNEQ,'>=',27,827)
LexToken(NUMBER,0,27,830)
LexToken(AND,'&&',27,832)
LexToken(ID,'valor',27,835)
LexToken(MINSIGNEQ,'<=',27,841)
LexToken(ID,'LIMITE_SUPERIOR',27,844)
LexToken(SEMICOLON,';',27,859)
LexToken(RBRACE,'}',28,861)
LexToken(VOID,'void',30,864)
LexToken(ID,'mostrarResultado',30,869)
LexToken(LPAREN,'(',30,885)
LexToken(INT,'int',30,886)
LexToken(ID,'numero',30,890)
LexToken(COMMA,',',30,896)
LexToken(INT,'int',30,898)
LexToken(ID,'resultado',30,902)
LexToken(RPAREN,')',30,911)
LexToken(LBRACE,'{',30,913)
LexToken(PRINT,'print',31,917)
LexToken(LPAREN,'(',31,922)
LexToken(STRING_LITERAL,[('str', 'El factorial de '), ('var', 'numero'), ('str', ' es '), ('var', 'resultado'), ('str', '')],31,923)
LexToken(RPAREN,')',31,962)
LexToken(SEMICOLON,';',31,963)
LexToken(RBRACE,'}',32,965)
LexToken(VOID,'void',34,968)
LexToken(MAIN,'main',34,973)
LexToken(LPAREN,'(',34,977)
LexToken(RPAREN,')',34,978)
LexToken(LBRACE,'{',34,980)
LexToken(PRINT,'print',35,984)
LexToken(LPAREN,'(',35,989)
LexToken(STRING_LITERAL,[('str', 'Ingrese un número entero positivo (máximo '), ('var', 'LIMITE_SUPERIOR'), ('str', '):')],35,990)
LexToken(RPAREN,')',35,1052)
LexToken(SEMICOLON,';',35,1053)
LexToken(STRING,'String',36,1057)
LexToken(QMARK,'?',36,1063)
LexToken(ID,'entrada',36,1065)
LexToken(EQUALS,'=',36,1073)
LexToken(ID,'stdin',36,1075)
LexToken(DOT,'.',36,1080)
LexToken(ID,'readLineSync',36,1081)
LexToken(LPAREN,'(',36,1093)
LexToken(RPAREN,')',36,1094)
LexToken(SEMICOLON,';',36,1095)
LexToken(ID,'try',38,1102)
LexToken(LBRACE,'{',38,1106)
LexToken(INT,'int',39,1112)
LexToken(ID,'numero',39,1116)
LexToken(EQUALS,'=',39,1123)
LexToken(INT,'int',39,1125)
LexToken(DOT,'.',39,1128)
LexToken(ID,'parse',39,1129)
LexToken(LPAREN,'(',39,1134)
LexToken(ID,'entrada',39,1135)
LexToken(NULLCOALESCING,'??',39,1143)
LexToken(STRING_LITERAL,[('str', '0')],39,1146)
LexToken(RPAREN,')',39,1149)
LexToken(SEMICOLON,';',39,1150)
LexToken(IF,'if',41,1157)
LexToken(LPAREN,'(',41,1160)
LexToken(NOT,'!',41,1161)
LexToken(ID,'validarEntrada',41,1162)
LexToken(LPAREN,'(',41,1176)
LexToken(ID,'numero',41,1177)
LexToken(RPAREN,')',41,1183)
LexToken(RPAREN,')',41,1184)
LexToken(LBRACE,'{',41,1186)
LexToken(PRINT,'print',42,1194)
LexToken(LPAREN,'(',42,1199)
LexToken(STRING_LITERAL,[('str', 'Número inválido. Intente nuevamente con un entero entre 0 y '), ('var', 'LIMITE_SUPERIOR'), ('str', '.')],42,1200)
LexToken(RPAREN,')',42,1279)
LexToken(SEMICOLON,';',42,1280)
LexToken(RETURN,'return',43,1288)
LexToken(SEMICOLON,';',43,1294)
LexToken(RBRACE,'}',44,1300)
LexToken(INT,'int',46,1307)
LexToken(ID,'resultadoIterativo',46,1311)
LexToken(EQUALS,'=',46,1330)
LexToken(ID,'calcularFactorialIterativo',46,1332)
LexToken(LPAREN,'(',46,1358)
LexToken(ID,'numero',46,1359)
LexToken(RPAREN,')',46,1365)
LexToken(SEMICOLON,';',46,1366)
LexToken(INT,'int',47,1372)
LexToken(ID,'resultadoRecursivo',47,1376)
LexToken(EQUALS,'=',47,1395)
LexToken(ID,'calcularFactorialRecursivo',47,1397)
LexToken(LPAREN,'(',47,1423)
LexToken(ID,'numero',47,1424)
LexToken(RPAREN,')',47,1430)
LexToken(SEMICOLON,';',47,1431)
LexToken(IF,'if',49,1434)
LexToken(LPAREN,'(',49,1437)
LexToken(ID,'resultadoIterativo',49,1438)
LexToken(NEQ,'!=',49,1457)
LexToken(ID,'resultadoRecursivo',49,1460)
LexToken(RPAREN,')',49,1478)
LexToken(LBRACE,'{',49,1480)
LexToken(PRINT,'print',50,1488)
LexToken(LPAREN,'(',50,1493)
LexToken(STRING_LITERAL,[('str', '¡Alerta! Los métodos iterativo y recursivo no coinciden.')],50,1494)
LexToken(RPAREN,')',50,1552)
LexToken(SEMICOLON,';',50,1553)
LexToken(RBRACE,'}',51,1559)
LexToken(ELSE,'else',51,1561)
LexToken(LBRACE,'{',51,1566)
LexToken(ID,'mostrarResultado',52,1574)
LexToken(LPAREN,'(',52,1590)
LexToken(ID,'numero',52,1591)
LexToken(COMMA,',',52,1597)
LexToken(ID,'resultadoIterativo',52,1599)
LexToken(RPAREN,')',52,1617)
LexToken(SEMICOLON,';',52,1618)
LexToken(RBRACE,'}',53,1624)
LexToken(RBRACE,'}',54,1626)
LexToken(ID,'catch',54,1628)
LexToken(LPAREN,'(',54,1634)
LexToken(ID,'e',54,1635)
LexToken(RPAREN,')',54,1636)
LexToken(LBRACE,'{',54,1638)
LexToken(PRINT,'print',55,1644)
LexToken(LPAREN,'(',55,1649)
LexToken(STRING_LITERAL,[('str', 'Error de entrada: '), ('var', 'e'), ('str', '')],55,1650)
LexToken(RPAREN,')',55,1672)
LexToken(SEMICOLON,';',55,1673)
LexToken(RBRACE,'}',56,1677)
LexToken(RBRACE,'}',58,1680)
