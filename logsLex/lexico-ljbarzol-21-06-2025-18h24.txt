Tokens de algoritmo1.dart:
LexToken(IMPORT,'import',7,238)
LexToken(STRING_LITERAL,[('str', 'dart:io')],7,245)
LexToken(SEMICOLON,';',7,254)
LexToken(CONST,'const',9,257)
LexToken(INT,'int',9,263)
LexToken(ID,'LIMITE_SUPERIOR',9,267)
LexToken(EQUALS,'=',9,283)
LexToken(NUMBER,20,9,285)
LexToken(SEMICOLON,';',9,287)
LexToken(INT,'int',11,337)
LexToken(ID,'calcularFactorialIterativo',11,341)
LexToken(LPAREN,'(',11,367)
LexToken(INT,'int',11,368)
LexToken(ID,'n',11,372)
LexToken(RPAREN,')',11,373)
LexToken(LBRACE,'{',11,375)
LexToken(IF,'if',12,379)
LexToken(LPAREN,'(',12,382)
LexToken(ID,'n',12,383)
LexToken(MINSIGN,'<',12,385)
LexToken(NUMBER,0,12,387)
LexToken(RPAREN,')',12,388)
LexToken(THROW,'throw',12,390)
LexToken(ID,'ArgumentError',12,396)
LexToken(LPAREN,'(',12,409)
LexToken(STRING_LITERAL,[('str', 'El número no puede ser negativo')],12,410)
LexToken(RPAREN,')',12,443)
LexToken(SEMICOLON,';',12,444)
LexToken(INT,'int',13,448)
LexToken(ID,'resultado',13,452)
LexToken(EQUALS,'=',13,462)
LexToken(NUMBER,1,13,464)
LexToken(SEMICOLON,';',13,465)
LexToken(FOR,'for',14,469)
LexToken(LPAREN,'(',14,473)
LexToken(INT,'int',14,474)
LexToken(ID,'i',14,478)
LexToken(EQUALS,'=',14,480)
LexToken(NUMBER,2,14,482)
LexToken(SEMICOLON,';',14,483)
LexToken(ID,'i',14,485)
LexToken(MINSIGNEQ,'<=',14,487)
LexToken(ID,'n',14,490)
LexToken(SEMICOLON,';',14,491)
LexToken(ID,'i',14,493)
LexToken(PLUSPLUS,'++',14,494)
LexToken(RPAREN,')',14,496)
LexToken(LBRACE,'{',14,498)
LexToken(ID,'resultado',15,504)
LexToken(TIMESEQ,'*=',15,514)
LexToken(ID,'i',15,517)
LexToken(SEMICOLON,';',15,518)
LexToken(RBRACE,'}',16,522)
LexToken(RETURN,'return',17,526)
LexToken(ID,'resultado',17,533)
LexToken(SEMICOLON,';',17,542)
LexToken(RBRACE,'}',18,544)
LexToken(INT,'int',20,547)
LexToken(ID,'calcularFactorialRecursivo',20,551)
LexToken(LPAREN,'(',20,577)
LexToken(INT,'int',20,578)
LexToken(ID,'n',20,582)
LexToken(RPAREN,')',20,583)
LexToken(LBRACE,'{',20,585)
LexToken(IF,'if',21,589)
LexToken(LPAREN,'(',21,592)
LexToken(ID,'n',21,593)
LexToken(MINSIGN,'<',21,595)
LexToken(NUMBER,0,21,597)
LexToken(RPAREN,')',21,598)
LexToken(THROW,'throw',21,600)
LexToken(ID,'ArgumentError',21,606)
LexToken(LPAREN,'(',21,619)
LexToken(STRING_LITERAL,[('str', 'El número no puede ser negativo')],21,620)
LexToken(RPAREN,')',21,653)
LexToken(SEMICOLON,';',21,654)
LexToken(IF,'if',22,658)
LexToken(LPAREN,'(',22,661)
LexToken(ID,'n',22,662)
LexToken(EQEQ,'==',22,664)
LexToken(NUMBER,0,22,667)
LexToken(OR,'||',22,669)
LexToken(ID,'n',22,672)
LexToken(EQEQ,'==',22,674)
LexToken(NUMBER,1,22,677)
LexToken(RPAREN,')',22,678)
LexToken(RETURN,'return',22,680)
LexToken(NUMBER,1,22,687)
LexToken(SEMICOLON,';',22,688)
LexToken(RETURN,'return',23,692)
LexToken(ID,'n',23,699)
LexToken(TIMES,'*',23,701)
LexToken(ID,'calcularFactorialRecursivo',23,703)
LexToken(LPAREN,'(',23,729)
LexToken(ID,'n',23,730)
LexToken(MINUS,'-',23,732)
LexToken(NUMBER,1,23,734)
LexToken(RPAREN,')',23,735)
LexToken(SEMICOLON,';',23,736)
LexToken(RBRACE,'}',24,738)
LexToken(BOOL,'bool',26,741)
LexToken(ID,'validarEntrada',26,746)
LexToken(LPAREN,'(',26,760)
LexToken(ID,'dynamic',26,761)
LexToken(ID,'valor',26,769)
LexToken(RPAREN,')',26,774)
LexToken(LBRACE,'{',26,776)
LexToken(IF,'if',27,780)
LexToken(LPAREN,'(',27,783)
LexToken(ID,'valor',27,784)
LexToken(ID,'is',27,790)
LexToken(NOT,'!',27,792)
LexToken(INT,'int',27,794)
LexToken(RPAREN,')',27,797)
LexToken(RETURN,'return',27,799)
LexToken(ID,'false',27,806)
LexToken(SEMICOLON,';',27,811)
LexToken(RETURN,'return',28,815)
LexToken(ID,'valor',28,822)
LexToken(MAXSIGNEQ,'>=',28,828)
LexToken(NUMBER,0,28,831)
LexToken(AND,'&&',28,833)
LexToken(ID,'valor',28,836)
LexToken(MINSIGNEQ,'<=',28,842)
LexToken(ID,'LIMITE_SUPERIOR',28,845)
LexToken(SEMICOLON,';',28,860)
LexToken(RBRACE,'}',29,862)
LexToken(VOID,'void',31,865)
LexToken(ID,'mostrarResultado',31,870)
LexToken(LPAREN,'(',31,886)
LexToken(INT,'int',31,887)
LexToken(ID,'numero',31,891)
LexToken(COMMA,',',31,897)
LexToken(INT,'int',31,899)
LexToken(ID,'resultado',31,903)
LexToken(RPAREN,')',31,912)
LexToken(LBRACE,'{',31,914)
LexToken(PRINT,'print',32,918)
LexToken(LPAREN,'(',32,923)
LexToken(STRING_LITERAL,[('str', 'El factorial de '), ('var', 'numero'), ('str', ' es '), ('var', 'resultado'), ('str', '')],32,924)
LexToken(RPAREN,')',32,963)
LexToken(SEMICOLON,';',32,964)
LexToken(RBRACE,'}',33,966)
LexToken(VOID,'void',35,969)
LexToken(MAIN,'main',35,974)
LexToken(LPAREN,'(',35,978)
LexToken(RPAREN,')',35,979)
LexToken(LBRACE,'{',35,981)
LexToken(PRINT,'print',36,985)
LexToken(LPAREN,'(',36,990)
LexToken(STRING_LITERAL,[('str', 'Ingrese un número entero positivo (máximo '), ('var', 'LIMITE_SUPERIOR'), ('str', '):')],36,991)
LexToken(RPAREN,')',36,1053)
LexToken(SEMICOLON,';',36,1054)
LexToken(STRING,'String',37,1058)
LexToken(QMARK,'?',37,1064)
LexToken(ID,'entrada',37,1066)
LexToken(EQUALS,'=',37,1074)
LexToken(ID,'stdin',37,1076)
LexToken(DOT,'.',37,1081)
LexToken(ID,'readLineSync',37,1082)
LexToken(LPAREN,'(',37,1094)
LexToken(RPAREN,')',37,1095)
LexToken(SEMICOLON,';',37,1096)
LexToken(ID,'try',39,1103)
LexToken(LBRACE,'{',39,1107)
LexToken(INT,'int',40,1113)
LexToken(ID,'numero',40,1117)
LexToken(EQUALS,'=',40,1124)
LexToken(INT,'int',40,1126)
LexToken(DOT,'.',40,1129)
LexToken(ID,'parse',40,1130)
LexToken(LPAREN,'(',40,1135)
LexToken(ID,'entrada',40,1136)
LexToken(NULLCOALESCING,'??',40,1144)
LexToken(STRING_LITERAL,[('str', '0')],40,1147)
LexToken(RPAREN,')',40,1150)
LexToken(SEMICOLON,';',40,1151)
LexToken(IF,'if',42,1158)
LexToken(LPAREN,'(',42,1161)
LexToken(NOT,'!',42,1162)
LexToken(ID,'validarEntrada',42,1163)
LexToken(LPAREN,'(',42,1177)
LexToken(ID,'numero',42,1178)
LexToken(RPAREN,')',42,1184)
LexToken(RPAREN,')',42,1185)
LexToken(LBRACE,'{',42,1187)
LexToken(PRINT,'print',43,1195)
LexToken(LPAREN,'(',43,1200)
LexToken(STRING_LITERAL,[('str', 'Número inválido. Intente nuevamente con un entero entre 0 y '), ('var', 'LIMITE_SUPERIOR'), ('str', '.')],43,1201)
LexToken(RPAREN,')',43,1280)
LexToken(SEMICOLON,';',43,1281)
LexToken(RETURN,'return',44,1289)
LexToken(SEMICOLON,';',44,1295)
LexToken(RBRACE,'}',45,1301)
LexToken(INT,'int',47,1308)
LexToken(ID,'resultadoIterativo',47,1312)
LexToken(EQUALS,'=',47,1331)
LexToken(ID,'calcularFactorialIterativo',47,1333)
LexToken(LPAREN,'(',47,1359)
LexToken(ID,'numero',47,1360)
LexToken(RPAREN,')',47,1366)
LexToken(SEMICOLON,';',47,1367)
LexToken(INT,'int',48,1373)
LexToken(ID,'resultadoRecursivo',48,1377)
LexToken(EQUALS,'=',48,1396)
LexToken(ID,'calcularFactorialRecursivo',48,1398)
LexToken(LPAREN,'(',48,1424)
LexToken(ID,'numero',48,1425)
LexToken(RPAREN,')',48,1431)
LexToken(SEMICOLON,';',48,1432)
LexToken(IF,'if',50,1435)
LexToken(LPAREN,'(',50,1438)
LexToken(ID,'resultadoIterativo',50,1439)
LexToken(NEQ,'!=',50,1458)
LexToken(ID,'resultadoRecursivo',50,1461)
LexToken(RPAREN,')',50,1479)
LexToken(LBRACE,'{',50,1481)
LexToken(PRINT,'print',51,1489)
LexToken(LPAREN,'(',51,1494)
LexToken(STRING_LITERAL,[('str', '¡Alerta! Los métodos iterativo y recursivo no coinciden.')],51,1495)
LexToken(RPAREN,')',51,1553)
LexToken(SEMICOLON,';',51,1554)
LexToken(RBRACE,'}',52,1560)
LexToken(ELSE,'else',52,1562)
LexToken(LBRACE,'{',52,1567)
LexToken(ID,'mostrarResultado',53,1575)
LexToken(LPAREN,'(',53,1591)
LexToken(ID,'numero',53,1592)
LexToken(COMMA,',',53,1598)
LexToken(ID,'resultadoIterativo',53,1600)
LexToken(RPAREN,')',53,1618)
LexToken(SEMICOLON,';',53,1619)
LexToken(RBRACE,'}',54,1625)
LexToken(RBRACE,'}',55,1627)
LexToken(ID,'catch',55,1629)
LexToken(LPAREN,'(',55,1635)
LexToken(ID,'e',55,1636)
LexToken(RPAREN,')',55,1637)
LexToken(LBRACE,'{',55,1639)
LexToken(PRINT,'print',56,1645)
LexToken(LPAREN,'(',56,1650)
LexToken(STRING_LITERAL,[('str', 'Error de entrada: '), ('var', 'e'), ('str', '')],56,1651)
LexToken(RPAREN,')',56,1673)
LexToken(SEMICOLON,';',56,1674)
LexToken(RBRACE,'}',57,1678)
LexToken(RBRACE,'}',59,1681)
