
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDnonassocEQEQNEQnonassocMINSIGNMAXSIGNMINSIGNEQMAXSIGNEQleftPLUSMINUSleftTIMESDIVIDErightELSErightU_NOTleftPLUSPLUSMINUSMINUSleftDOTLBRACKETleftNOTAND BOOL BREAK CASE CLASS COLON COMMA COMMENT CONST CONTINUE DIVEQ DIVIDE DOT DOUBLE ELSE EQEQ EQUALS EXTENDS FINAL FOR ID IF IMPLEMENTS IMPORT INT INTDIV LBRACE LBRACKET LPAREN MAIN MAXSIGN MAXSIGNEQ MINSIGN MINSIGNEQ MINUS MINUSEQ MINUSMINUS MODULE NEQ NOT NULLASSIGN NULLCOALESCING NUMBER OR PLUS PLUSEQ PLUSPLUS PRINT QMARK QMARK_DOT RBRACE RBRACKET RETURN RPAREN SEMICOLON SQUOTE STRING STRING_LITERAL SWITCH THEN TIMES TIMESEQ VAR VOID WHILEprogram : declaration_listdeclaration_list : declaration_list declaration\n                        | emptydeclaration : class\n                   | function_declaration\n                   | assignment SEMICOLONclass : CLASS ID LBRACE class_body RBRACEclass_body : class_member class_body\n                  | emptyclass_member : class_property\n                    | function_declarationfunction_declaration : declaration_type function_name LPAREN parameters RPAREN LBRACE body RBRACEfunction_name : ID\n                     | MAINclass_property : declaration_type ID SEMICOLONdeclaration_type : primitive_type\n                        | generic_type\n                        | IDprimitive_type : INT\n                      | DOUBLE\n                      | STRING\n                      | BOOL\n                      | VOID\n                      | VARgeneric_type : ID MINSIGN type_list MAXSIGNtype_list : type_list COMMA declaration_type\n                 | declaration_typeexpression : expression AND expression\n                  | expression OR expressionexpression : expression EQEQ expression\n                  | expression NEQ expression\n                  | expression MINSIGN expression\n                  | expression MAXSIGN expression\n                  | expression MINSIGNEQ expression\n                  | expression MAXSIGNEQ expressionexpression : NOT expression %prec U_NOTexpression : expression PLUSPLUS\n                  | expression MINUSMINUSexpression : expression DOT IDexpression : expression LBRACKET expression RBRACKETexpression : expression LPAREN arguments RPARENarguments : expression_list\n                 | emptyexpression : expression NOTexpression : expression PLUS expression\n                    | expression MINUS expression\n                    | expression TIMES expression\n                    | expression DIVIDE expressionexpression : termterm : factorfactor : primitive_type DOT ID LPAREN arguments RPARENfactor : NUMBERfactor : STRING_LITERALfactor : IDfactor : LPAREN expression RPARENinstructions : instruction instructions\n                    | emptyinstruction : assignment SEMICOLON\n                    | print_statement\n                    | if_else\n                    | while_loop\n                    | for_loop\n                    | return_statement\n                    | block_statementblock_statement : LBRACE instructions RBRACEassignment : declaration_type ID EQUALS expression\n                  | ID assign_op expressionassign_op : EQUALS\n                 | PLUSEQ\n                 | MINUSEQ\n                 | TIMESEQ\n                 | DIVEQ\n                 | NULLASSIGNexpression : expression QMARK expression COLON expressionprint_statement : PRINT LPAREN expression RPAREN SEMICOLONparameters : parameters COMMA declaration_type ID\n                  | declaration_type ID\n                  | emptyreturn_statement : RETURN expression SEMICOLON\n                        | RETURN SEMICOLONbody : instructionsif_else : IF LPAREN expression RPAREN instruction\n               | IF LPAREN expression RPAREN instruction ELSE instructionwhile_loop : WHILE LPAREN expression RPAREN instructionfor_loop : FOR LPAREN for_initializer SEMICOLON expression_opt SEMICOLON expression_opt RPAREN instructionfor_initializer : assignment\n                       | emptyexpression_opt : expression\n                      | emptyexpression : LBRACKET expression_list RBRACKETexpression : LBRACE set_or_map_contents RBRACEset_or_map_contents : expression set_or_map_tail\n                           | emptyset_or_map_tail : COLON expression map_tail\n                       | set_tailmap_tail : COMMA map_entries\n                | emptymap_entries : map_entries COMMA map_entry\n                   | map_entrymap_entry : expression COLON expressionset_tail : COMMA expression_list\n                | emptyexpression_list : expression COMMA expression_list\n                        | expression\n                        | emptyempty :'
    
_lr_action_items = {'CLASS':([0,2,3,4,5,6,19,89,164,],[-106,8,-3,-2,-4,-5,-6,-7,-12,]),'ID':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,32,35,36,37,39,44,47,48,50,52,53,54,55,56,57,58,59,60,61,62,65,66,67,69,70,71,72,73,82,83,84,85,89,111,115,117,123,124,127,131,132,133,136,139,140,143,146,147,148,149,150,151,156,164,166,167,168,169,170,172,173,174,175,182,186,187,188,189,190,191,195,196,197,199,200,],[-106,9,-3,-2,-4,-5,20,-18,30,-16,-17,-19,-20,-21,-22,-23,-24,-6,33,44,-68,-69,-70,-71,-72,-73,44,33,33,33,33,-18,44,33,44,-10,-11,91,33,33,33,33,33,33,33,33,100,33,33,33,33,33,33,33,119,-25,44,121,-7,33,33,33,44,-15,33,33,9,157,33,162,9,9,-59,-60,-61,-62,-63,-64,33,-12,-58,33,33,33,9,-80,33,33,-65,-79,9,9,33,-75,-82,-84,9,33,-83,9,-85,]),'INT':([0,2,3,4,5,6,19,21,22,23,24,25,26,27,28,32,35,36,37,39,47,48,50,52,53,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,84,89,111,115,117,123,124,127,131,132,136,140,143,146,147,148,149,150,151,156,164,166,167,168,169,170,172,173,174,175,182,186,187,188,189,190,191,195,196,197,199,200,],[-106,13,-3,-2,-4,-5,-6,13,13,-68,-69,-70,-71,-72,-73,13,13,13,13,13,13,13,13,-10,-11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-7,13,13,13,13,-15,13,13,13,13,13,13,-59,-60,-61,-62,-63,-64,13,-12,-58,13,13,13,13,-80,13,13,-65,-79,13,13,13,-75,-82,-84,13,13,-83,13,-85,]),'DOUBLE':([0,2,3,4,5,6,19,21,22,23,24,25,26,27,28,32,35,36,37,39,47,48,50,52,53,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,84,89,111,115,117,123,124,127,131,132,136,140,143,146,147,148,149,150,151,156,164,166,167,168,169,170,172,173,174,175,182,186,187,188,189,190,191,195,196,197,199,200,],[-106,14,-3,-2,-4,-5,-6,14,14,-68,-69,-70,-71,-72,-73,14,14,14,14,14,14,14,14,-10,-11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-7,14,14,14,14,-15,14,14,14,14,14,14,-59,-60,-61,-62,-63,-64,14,-12,-58,14,14,14,14,-80,14,14,-65,-79,14,14,14,-75,-82,-84,14,14,-83,14,-85,]),'STRING':([0,2,3,4,5,6,19,21,22,23,24,25,26,27,28,32,35,36,37,39,47,48,50,52,53,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,84,89,111,115,117,123,124,127,131,132,136,140,143,146,147,148,149,150,151,156,164,166,167,168,169,170,172,173,174,175,182,186,187,188,189,190,191,195,196,197,199,200,],[-106,15,-3,-2,-4,-5,-6,15,15,-68,-69,-70,-71,-72,-73,15,15,15,15,15,15,15,15,-10,-11,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-7,15,15,15,15,-15,15,15,15,15,15,15,-59,-60,-61,-62,-63,-64,15,-12,-58,15,15,15,15,-80,15,15,-65,-79,15,15,15,-75,-82,-84,15,15,-83,15,-85,]),'BOOL':([0,2,3,4,5,6,19,21,22,23,24,25,26,27,28,32,35,36,37,39,47,48,50,52,53,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,84,89,111,115,117,123,124,127,131,132,136,140,143,146,147,148,149,150,151,156,164,166,167,168,169,170,172,173,174,175,182,186,187,188,189,190,191,195,196,197,199,200,],[-106,16,-3,-2,-4,-5,-6,16,16,-68,-69,-70,-71,-72,-73,16,16,16,16,16,16,16,16,-10,-11,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-7,16,16,16,16,-15,16,16,16,16,16,16,-59,-60,-61,-62,-63,-64,16,-12,-58,16,16,16,16,-80,16,16,-65,-79,16,16,16,-75,-82,-84,16,16,-83,16,-85,]),'VOID':([0,2,3,4,5,6,19,21,22,23,24,25,26,27,28,32,35,36,37,39,47,48,50,52,53,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,84,89,111,115,117,123,124,127,131,132,136,140,143,146,147,148,149,150,151,156,164,166,167,168,169,170,172,173,174,175,182,186,187,188,189,190,191,195,196,197,199,200,],[-106,17,-3,-2,-4,-5,-6,17,17,-68,-69,-70,-71,-72,-73,17,17,17,17,17,17,17,17,-10,-11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-7,17,17,17,17,-15,17,17,17,17,17,17,-59,-60,-61,-62,-63,-64,17,-12,-58,17,17,17,17,-80,17,17,-65,-79,17,17,17,-75,-82,-84,17,17,-83,17,-85,]),'VAR':([0,2,3,4,5,6,19,21,22,23,24,25,26,27,28,32,35,36,37,39,47,48,50,52,53,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,84,89,111,115,117,123,124,127,131,132,136,140,143,146,147,148,149,150,151,156,164,166,167,168,169,170,172,173,174,175,182,186,187,188,189,190,191,195,196,197,199,200,],[-106,18,-3,-2,-4,-5,-6,18,18,-68,-69,-70,-71,-72,-73,18,18,18,18,18,18,18,18,-10,-11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-7,18,18,18,18,-15,18,18,18,18,18,18,-59,-60,-61,-62,-63,-64,18,-12,-58,18,18,18,18,-80,18,18,-65,-79,18,18,18,-75,-82,-84,18,18,-83,18,-85,]),'$end':([0,1,2,3,4,5,6,19,89,164,],[-106,0,-1,-3,-2,-4,-5,-6,-7,-12,]),'SEMICOLON':([7,33,34,38,40,42,43,63,64,68,74,88,91,92,93,94,95,96,97,98,99,100,105,106,107,108,110,112,113,125,126,134,145,156,161,170,171,179,180,181,185,188,192,193,194,],[19,-54,-67,-49,-50,-52,-53,-37,-38,-44,-36,-66,124,-28,-29,-30,-31,-32,-33,-34,-35,-39,-45,-46,-47,-48,-90,-55,-91,-40,-41,-74,166,172,-51,-106,182,188,-86,-87,189,-106,196,-88,-89,]),'MAIN':([9,10,11,12,13,14,15,16,17,18,44,54,83,],[-18,31,-16,-17,-19,-20,-21,-22,-23,-24,-18,31,-25,]),'MINSIGN':([9,33,34,38,40,42,43,44,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[22,-54,59,-49,-50,-52,-53,22,-37,-38,-44,-36,59,59,59,59,59,59,59,59,None,None,None,None,-39,59,-45,-46,-47,-48,59,-90,-55,-91,-40,-41,59,59,59,-51,59,59,59,59,59,59,]),'EQUALS':([9,30,162,],[23,48,48,]),'PLUSEQ':([9,],[24,]),'MINUSEQ':([9,],[25,]),'TIMESEQ':([9,],[26,]),'DIVEQ':([9,],[27,]),'NULLASSIGN':([9,],[28,]),'MAXSIGN':([11,12,13,14,15,16,17,18,33,34,38,40,42,43,44,45,46,63,64,68,74,76,78,80,83,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,120,125,126,129,134,160,161,171,176,177,178,184,193,],[-16,-17,-19,-20,-21,-22,-23,-24,-54,60,-49,-50,-52,-53,-18,83,-27,-37,-38,-44,-36,60,60,60,-25,60,60,60,60,60,None,None,None,None,-39,60,-45,-46,-47,-48,60,-90,-55,-91,-26,-40,-41,60,60,60,-51,60,60,60,60,60,60,]),'COMMA':([11,12,13,14,15,16,17,18,33,38,40,42,43,44,45,46,47,63,64,68,74,76,80,83,86,87,92,93,94,95,96,97,98,99,100,105,106,107,108,110,112,113,120,121,125,126,129,134,157,158,159,161,183,184,],[-16,-17,-19,-20,-21,-22,-23,-24,-54,-49,-50,-52,-53,-18,84,-27,-106,-37,-38,-44,-36,111,117,-25,123,-78,-28,-29,-30,-31,-32,-33,-34,-35,-39,-45,-46,-47,-48,-90,-55,-91,-26,-77,-40,-41,136,-74,-76,173,-99,-51,-98,-100,]),'DOT':([13,14,15,16,17,18,33,34,38,40,41,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-19,-20,-21,-22,-23,-24,-54,65,-49,-50,82,-52,-53,-37,-38,-44,65,65,65,65,65,65,65,65,65,65,65,65,65,-39,65,65,65,65,65,65,-90,-55,-91,-40,-41,65,65,65,-51,65,65,65,65,65,65,]),'LBRACE':([20,21,23,24,25,26,27,28,35,36,37,39,48,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,111,115,117,122,127,131,132,136,140,143,146,147,148,149,150,151,156,166,167,168,169,172,173,174,175,182,186,187,188,189,190,191,195,196,197,199,200,],[32,39,-68,-69,-70,-71,-72,-73,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,132,39,39,140,39,140,140,-59,-60,-61,-62,-63,-64,39,-58,39,39,39,-80,39,39,-65,-79,140,140,39,-75,-82,-84,140,39,-83,140,-85,]),'NOT':([21,23,24,25,26,27,28,33,34,35,36,37,38,39,40,42,43,48,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,111,112,113,115,117,125,126,127,129,131,134,136,156,160,161,167,168,169,171,173,174,176,177,178,184,188,193,196,],[35,-68,-69,-70,-71,-72,-73,-54,68,35,35,35,-49,35,-50,-52,-53,35,35,35,35,35,35,35,35,35,-37,-38,35,35,-44,35,35,35,35,35,68,68,68,68,68,68,68,68,68,68,68,68,68,-39,68,68,68,68,68,68,-90,35,-55,-91,35,35,-40,-41,35,68,35,68,35,35,68,-51,35,35,35,68,35,35,68,68,68,68,35,68,35,]),'LBRACKET':([21,23,24,25,26,27,28,33,34,35,36,37,38,39,40,42,43,48,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,111,112,113,115,117,125,126,127,129,131,134,136,156,160,161,167,168,169,171,173,174,176,177,178,184,188,193,196,],[36,-68,-69,-70,-71,-72,-73,-54,66,36,36,36,-49,36,-50,-52,-53,36,36,36,36,36,36,36,36,36,-37,-38,36,36,-44,36,36,36,36,36,66,66,66,66,66,66,66,66,66,66,66,66,66,-39,66,66,66,66,66,66,-90,36,-55,-91,36,36,-40,-41,36,66,36,66,36,36,66,-51,36,36,36,66,36,36,66,66,66,66,36,66,36,]),'NUMBER':([21,23,24,25,26,27,28,35,36,37,39,48,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,111,115,117,127,131,136,156,167,168,169,173,174,188,196,],[42,-68,-69,-70,-71,-72,-73,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'STRING_LITERAL':([21,23,24,25,26,27,28,35,36,37,39,48,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,111,115,117,127,131,136,156,167,168,169,173,174,188,196,],[43,-68,-69,-70,-71,-72,-73,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'LPAREN':([21,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,42,43,48,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,76,78,80,88,91,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,111,112,113,115,117,119,125,126,127,129,131,134,136,152,153,154,155,156,160,161,167,168,169,171,173,174,176,177,178,184,188,193,196,],[37,-68,-69,-70,-71,-72,-73,47,-13,-14,-54,67,37,37,37,-49,37,-50,-52,-53,37,37,37,37,37,37,37,37,37,-37,-38,37,37,-44,37,37,37,37,37,-36,67,67,67,67,-13,-28,-29,-30,-31,-32,-33,-34,-35,-39,67,-45,-46,-47,-48,67,-90,37,-55,-91,37,37,131,-40,-41,37,67,37,67,37,167,168,169,170,37,67,-51,37,37,37,67,37,37,67,67,67,67,37,67,37,]),'RBRACE':([32,33,38,39,40,42,43,49,50,51,52,53,63,64,68,74,76,77,79,80,81,90,92,93,94,95,96,97,98,99,100,105,106,107,108,110,111,112,113,114,116,117,118,124,125,126,128,129,130,132,134,135,137,140,141,142,143,144,146,147,148,149,150,151,158,159,161,163,164,165,166,172,175,182,183,184,189,190,191,197,200,],[-106,-54,-49,-106,-50,-52,-53,89,-106,-9,-10,-11,-37,-38,-44,-36,-104,-105,113,-106,-93,-8,-28,-29,-30,-31,-32,-33,-34,-35,-39,-45,-46,-47,-48,-90,-106,-55,-91,-92,-95,-106,-102,-15,-40,-41,-103,-106,-101,-106,-74,-94,-97,-106,164,-81,-106,-57,-59,-60,-61,-62,-63,-64,-96,-99,-51,175,-12,-56,-58,-80,-65,-79,-98,-100,-75,-82,-84,-83,-85,]),'AND':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,55,-49,-50,-52,-53,-37,-38,-44,-36,55,55,55,55,-28,55,-30,-31,-32,-33,-34,-35,-39,55,-45,-46,-47,-48,55,-90,-55,-91,-40,-41,55,55,55,-51,55,55,55,55,55,55,]),'OR':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,56,-49,-50,-52,-53,-37,-38,-44,-36,56,56,56,56,-28,-29,-30,-31,-32,-33,-34,-35,-39,56,-45,-46,-47,-48,56,-90,-55,-91,-40,-41,56,56,56,-51,56,56,56,56,56,56,]),'EQEQ':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,57,-49,-50,-52,-53,-37,-38,-44,-36,57,57,57,57,57,57,None,None,-32,-33,-34,-35,-39,57,-45,-46,-47,-48,57,-90,-55,-91,-40,-41,57,57,57,-51,57,57,57,57,57,57,]),'NEQ':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,58,-49,-50,-52,-53,-37,-38,-44,-36,58,58,58,58,58,58,None,None,-32,-33,-34,-35,-39,58,-45,-46,-47,-48,58,-90,-55,-91,-40,-41,58,58,58,-51,58,58,58,58,58,58,]),'MINSIGNEQ':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,61,-49,-50,-52,-53,-37,-38,-44,-36,61,61,61,61,61,61,61,61,None,None,None,None,-39,61,-45,-46,-47,-48,61,-90,-55,-91,-40,-41,61,61,61,-51,61,61,61,61,61,61,]),'MAXSIGNEQ':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,62,-49,-50,-52,-53,-37,-38,-44,-36,62,62,62,62,62,62,62,62,None,None,None,None,-39,62,-45,-46,-47,-48,62,-90,-55,-91,-40,-41,62,62,62,-51,62,62,62,62,62,62,]),'PLUSPLUS':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,63,-49,-50,-52,-53,-37,-38,-44,63,63,63,63,63,63,63,63,63,63,63,63,63,-39,63,63,63,63,63,63,-90,-55,-91,-40,-41,63,63,63,-51,63,63,63,63,63,63,]),'MINUSMINUS':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,64,-49,-50,-52,-53,-37,-38,-44,64,64,64,64,64,64,64,64,64,64,64,64,64,-39,64,64,64,64,64,64,-90,-55,-91,-40,-41,64,64,64,-51,64,64,64,64,64,64,]),'PLUS':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,69,-49,-50,-52,-53,-37,-38,-44,-36,69,69,69,69,69,69,69,69,69,69,69,69,-39,69,-45,-46,-47,-48,69,-90,-55,-91,-40,-41,69,69,69,-51,69,69,69,69,69,69,]),'MINUS':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,70,-49,-50,-52,-53,-37,-38,-44,-36,70,70,70,70,70,70,70,70,70,70,70,70,-39,70,-45,-46,-47,-48,70,-90,-55,-91,-40,-41,70,70,70,-51,70,70,70,70,70,70,]),'TIMES':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,71,-49,-50,-52,-53,-37,-38,-44,-36,71,71,71,71,71,71,71,71,71,71,71,71,-39,71,71,71,-47,-48,71,-90,-55,-91,-40,-41,71,71,71,-51,71,71,71,71,71,71,]),'DIVIDE':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,72,-49,-50,-52,-53,-37,-38,-44,-36,72,72,72,72,72,72,72,72,72,72,72,72,-39,72,72,72,-47,-48,72,-90,-55,-91,-40,-41,72,72,72,-51,72,72,72,72,72,72,]),'QMARK':([33,34,38,40,42,43,63,64,68,74,76,78,80,88,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,112,113,125,126,129,134,160,161,171,176,177,178,184,193,],[-54,73,-49,-50,-52,-53,-37,-38,-44,-36,73,73,73,73,-28,-29,-30,-31,-32,-33,-34,-35,-39,73,-45,-46,-47,-48,73,-90,-55,-91,-40,-41,73,73,73,-51,73,73,73,73,73,73,]),'RBRACKET':([33,36,38,40,42,43,63,64,68,74,75,76,77,92,93,94,95,96,97,98,99,100,101,105,106,107,108,110,111,112,113,125,126,128,134,161,],[-54,-106,-49,-50,-52,-53,-37,-38,-44,-36,110,-104,-105,-28,-29,-30,-31,-32,-33,-34,-35,-39,125,-45,-46,-47,-48,-90,-106,-55,-91,-40,-41,-103,-74,-51,]),'RPAREN':([33,38,40,42,43,47,63,64,67,68,74,76,77,78,86,87,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,110,111,112,113,121,125,126,128,131,134,138,157,161,176,177,178,193,194,196,198,],[-54,-49,-50,-52,-53,-106,-37,-38,-106,-44,-36,-104,-105,112,122,-78,-28,-29,-30,-31,-32,-33,-34,-35,-39,126,-42,-43,-45,-46,-47,-48,-90,-106,-55,-91,-77,-40,-41,-103,-106,-74,161,-76,-51,185,186,187,-88,-89,-106,199,]),'COLON':([33,38,40,42,43,63,64,68,74,80,92,93,94,95,96,97,98,99,100,105,106,107,108,109,110,112,113,125,126,134,160,161,],[-54,-49,-50,-52,-53,-37,-38,-44,-36,115,-28,-29,-30,-31,-32,-33,-34,-35,-39,-45,-46,-47,-48,127,-90,-55,-91,-40,-41,-74,174,-51,]),'PRINT':([132,140,143,146,147,148,149,150,151,166,172,175,182,186,187,189,190,191,195,197,199,200,],[152,152,152,-59,-60,-61,-62,-63,-64,-58,-80,-65,-79,152,152,-75,-82,-84,152,-83,152,-85,]),'IF':([132,140,143,146,147,148,149,150,151,166,172,175,182,186,187,189,190,191,195,197,199,200,],[153,153,153,-59,-60,-61,-62,-63,-64,-58,-80,-65,-79,153,153,-75,-82,-84,153,-83,153,-85,]),'WHILE':([132,140,143,146,147,148,149,150,151,166,172,175,182,186,187,189,190,191,195,197,199,200,],[154,154,154,-59,-60,-61,-62,-63,-64,-58,-80,-65,-79,154,154,-75,-82,-84,154,-83,154,-85,]),'FOR':([132,140,143,146,147,148,149,150,151,166,172,175,182,186,187,189,190,191,195,197,199,200,],[155,155,155,-59,-60,-61,-62,-63,-64,-58,-80,-65,-79,155,155,-75,-82,-84,155,-83,155,-85,]),'RETURN':([132,140,143,146,147,148,149,150,151,166,172,175,182,186,187,189,190,191,195,197,199,200,],[156,156,156,-59,-60,-61,-62,-63,-64,-58,-80,-65,-79,156,156,-75,-82,-84,156,-83,156,-85,]),'ELSE':([146,147,148,149,150,151,166,172,175,182,189,190,191,197,200,],[-59,-60,-61,-62,-63,-64,-58,-80,-65,-79,-75,195,-84,-83,-85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'empty':([0,32,36,39,47,50,67,80,111,117,129,131,132,140,143,170,188,196,],[3,51,77,81,87,51,104,118,77,77,137,104,144,144,144,181,194,194,]),'declaration':([2,],[4,]),'class':([2,],[5,]),'function_declaration':([2,32,50,],[6,53,53,]),'assignment':([2,132,140,143,170,186,187,195,199,],[7,145,145,145,180,145,145,145,145,]),'declaration_type':([2,22,32,47,50,84,123,132,140,143,170,186,187,195,199,],[10,46,54,85,54,120,133,139,139,139,139,139,139,139,139,]),'primitive_type':([2,21,22,32,35,36,37,39,47,48,50,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,84,111,115,117,123,127,131,132,136,140,143,156,167,168,169,170,173,174,186,187,188,195,196,199,],[11,41,11,11,41,41,41,41,11,41,11,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,11,41,41,41,11,41,41,11,41,11,11,41,41,41,41,11,41,41,11,11,41,11,41,11,]),'generic_type':([2,22,32,47,50,84,123,132,140,143,170,186,187,195,199,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'assign_op':([9,],[21,]),'function_name':([10,54,],[29,29,]),'expression':([21,35,36,37,39,48,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,111,115,117,127,131,136,156,167,168,169,173,174,188,196,],[34,74,76,78,80,88,92,93,94,95,96,97,98,99,101,76,105,106,107,108,109,76,129,76,134,76,160,171,176,177,178,160,184,193,193,]),'term':([21,35,36,37,39,48,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,111,115,117,127,131,136,156,167,168,169,173,174,188,196,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'factor':([21,35,36,37,39,48,55,56,57,58,59,60,61,62,66,67,69,70,71,72,73,111,115,117,127,131,136,156,167,168,169,173,174,188,196,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'type_list':([22,],[45,]),'class_body':([32,50,],[49,90,]),'class_member':([32,50,],[50,50,]),'class_property':([32,50,],[52,52,]),'expression_list':([36,67,111,117,131,],[75,103,128,130,103,]),'set_or_map_contents':([39,],[79,]),'parameters':([47,],[86,]),'arguments':([67,131,],[102,138,]),'set_or_map_tail':([80,],[114,]),'set_tail':([80,],[116,]),'map_tail':([129,],[135,]),'body':([132,],[141,]),'instructions':([132,140,143,],[142,163,165,]),'instruction':([132,140,143,186,187,195,199,],[143,143,143,190,191,197,200,]),'print_statement':([132,140,143,186,187,195,199,],[146,146,146,146,146,146,146,]),'if_else':([132,140,143,186,187,195,199,],[147,147,147,147,147,147,147,]),'while_loop':([132,140,143,186,187,195,199,],[148,148,148,148,148,148,148,]),'for_loop':([132,140,143,186,187,195,199,],[149,149,149,149,149,149,149,]),'return_statement':([132,140,143,186,187,195,199,],[150,150,150,150,150,150,150,]),'block_statement':([132,140,143,186,187,195,199,],[151,151,151,151,151,151,151,]),'map_entries':([136,],[158,]),'map_entry':([136,173,],[159,183,]),'for_initializer':([170,],[179,]),'expression_opt':([188,196,],[192,198,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','sintactico.py',11),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','sintactico.py',15),
  ('declaration_list -> empty','declaration_list',1,'p_declaration_list','sintactico.py',16),
  ('declaration -> class','declaration',1,'p_declaration','sintactico.py',23),
  ('declaration -> function_declaration','declaration',1,'p_declaration','sintactico.py',24),
  ('declaration -> assignment SEMICOLON','declaration',2,'p_declaration','sintactico.py',25),
  ('class -> CLASS ID LBRACE class_body RBRACE','class',5,'p_class','sintactico.py',48),
  ('class_body -> class_member class_body','class_body',2,'p_class_body','sintactico.py',52),
  ('class_body -> empty','class_body',1,'p_class_body','sintactico.py',53),
  ('class_member -> class_property','class_member',1,'p_class_member','sintactico.py',60),
  ('class_member -> function_declaration','class_member',1,'p_class_member','sintactico.py',61),
  ('function_declaration -> declaration_type function_name LPAREN parameters RPAREN LBRACE body RBRACE','function_declaration',8,'p_function_declaration','sintactico.py',65),
  ('function_name -> ID','function_name',1,'p_function_name','sintactico.py',69),
  ('function_name -> MAIN','function_name',1,'p_function_name','sintactico.py',70),
  ('class_property -> declaration_type ID SEMICOLON','class_property',3,'p_class_property','sintactico.py',74),
  ('declaration_type -> primitive_type','declaration_type',1,'p_declaration_type','sintactico.py',78),
  ('declaration_type -> generic_type','declaration_type',1,'p_declaration_type','sintactico.py',79),
  ('declaration_type -> ID','declaration_type',1,'p_declaration_type','sintactico.py',80),
  ('primitive_type -> INT','primitive_type',1,'p_primitive_type','sintactico.py',84),
  ('primitive_type -> DOUBLE','primitive_type',1,'p_primitive_type','sintactico.py',85),
  ('primitive_type -> STRING','primitive_type',1,'p_primitive_type','sintactico.py',86),
  ('primitive_type -> BOOL','primitive_type',1,'p_primitive_type','sintactico.py',87),
  ('primitive_type -> VOID','primitive_type',1,'p_primitive_type','sintactico.py',88),
  ('primitive_type -> VAR','primitive_type',1,'p_primitive_type','sintactico.py',89),
  ('generic_type -> ID MINSIGN type_list MAXSIGN','generic_type',4,'p_generic_type','sintactico.py',93),
  ('type_list -> type_list COMMA declaration_type','type_list',3,'p_type_list','sintactico.py',97),
  ('type_list -> declaration_type','type_list',1,'p_type_list','sintactico.py',98),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','sintactico.py',108),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','sintactico.py',109),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_relational','sintactico.py',113),
  ('expression -> expression NEQ expression','expression',3,'p_expression_relational','sintactico.py',114),
  ('expression -> expression MINSIGN expression','expression',3,'p_expression_relational','sintactico.py',115),
  ('expression -> expression MAXSIGN expression','expression',3,'p_expression_relational','sintactico.py',116),
  ('expression -> expression MINSIGNEQ expression','expression',3,'p_expression_relational','sintactico.py',117),
  ('expression -> expression MAXSIGNEQ expression','expression',3,'p_expression_relational','sintactico.py',118),
  ('expression -> NOT expression','expression',2,'p_expression_not','sintactico.py',122),
  ('expression -> expression PLUSPLUS','expression',2,'p_expression_postfix','sintactico.py',126),
  ('expression -> expression MINUSMINUS','expression',2,'p_expression_postfix','sintactico.py',127),
  ('expression -> expression DOT ID','expression',3,'p_expression_member_access','sintactico.py',131),
  ('expression -> expression LBRACKET expression RBRACKET','expression',4,'p_expression_subscript','sintactico.py',135),
  ('expression -> expression LPAREN arguments RPAREN','expression',4,'p_expression_call','sintactico.py',139),
  ('arguments -> expression_list','arguments',1,'p_arguments','sintactico.py',143),
  ('arguments -> empty','arguments',1,'p_arguments','sintactico.py',144),
  ('expression -> expression NOT','expression',2,'p_expression_null_assert','sintactico.py',148),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaria','sintactico.py',152),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaria','sintactico.py',153),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaria','sintactico.py',154),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaria','sintactico.py',155),
  ('expression -> term','expression',1,'p_expression_term','sintactico.py',159),
  ('term -> factor','term',1,'p_term_factor','sintactico.py',163),
  ('factor -> primitive_type DOT ID LPAREN arguments RPAREN','factor',6,'p_factor_static_call','sintactico.py',167),
  ('factor -> NUMBER','factor',1,'p_factor_number','sintactico.py',171),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','sintactico.py',175),
  ('factor -> ID','factor',1,'p_factor_id','sintactico.py',179),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr_group','sintactico.py',183),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','sintactico.py',188),
  ('instructions -> empty','instructions',1,'p_instructions','sintactico.py',189),
  ('instruction -> assignment SEMICOLON','instruction',2,'p_instruction','sintactico.py',196),
  ('instruction -> print_statement','instruction',1,'p_instruction','sintactico.py',197),
  ('instruction -> if_else','instruction',1,'p_instruction','sintactico.py',198),
  ('instruction -> while_loop','instruction',1,'p_instruction','sintactico.py',199),
  ('instruction -> for_loop','instruction',1,'p_instruction','sintactico.py',200),
  ('instruction -> return_statement','instruction',1,'p_instruction','sintactico.py',201),
  ('instruction -> block_statement','instruction',1,'p_instruction','sintactico.py',202),
  ('block_statement -> LBRACE instructions RBRACE','block_statement',3,'p_block_statement','sintactico.py',206),
  ('assignment -> declaration_type ID EQUALS expression','assignment',4,'p_assignment','sintactico.py',211),
  ('assignment -> ID assign_op expression','assignment',3,'p_assignment','sintactico.py',212),
  ('assign_op -> EQUALS','assign_op',1,'p_assign_op','sintactico.py',219),
  ('assign_op -> PLUSEQ','assign_op',1,'p_assign_op','sintactico.py',220),
  ('assign_op -> MINUSEQ','assign_op',1,'p_assign_op','sintactico.py',221),
  ('assign_op -> TIMESEQ','assign_op',1,'p_assign_op','sintactico.py',222),
  ('assign_op -> DIVEQ','assign_op',1,'p_assign_op','sintactico.py',223),
  ('assign_op -> NULLASSIGN','assign_op',1,'p_assign_op','sintactico.py',224),
  ('expression -> expression QMARK expression COLON expression','expression',5,'p_expression_ternary','sintactico.py',228),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','sintactico.py',234),
  ('parameters -> parameters COMMA declaration_type ID','parameters',4,'p_parameters','sintactico.py',239),
  ('parameters -> declaration_type ID','parameters',2,'p_parameters','sintactico.py',240),
  ('parameters -> empty','parameters',1,'p_parameters','sintactico.py',241),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','sintactico.py',251),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','sintactico.py',252),
  ('body -> instructions','body',1,'p_body','sintactico.py',262),
  ('if_else -> IF LPAREN expression RPAREN instruction','if_else',5,'p_if_else','sintactico.py',271),
  ('if_else -> IF LPAREN expression RPAREN instruction ELSE instruction','if_else',7,'p_if_else','sintactico.py',272),
  ('while_loop -> WHILE LPAREN expression RPAREN instruction','while_loop',5,'p_while_loop','sintactico.py',280),
  ('for_loop -> FOR LPAREN for_initializer SEMICOLON expression_opt SEMICOLON expression_opt RPAREN instruction','for_loop',9,'p_for_loop','sintactico.py',285),
  ('for_initializer -> assignment','for_initializer',1,'p_for_initializer','sintactico.py',289),
  ('for_initializer -> empty','for_initializer',1,'p_for_initializer','sintactico.py',290),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','sintactico.py',294),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','sintactico.py',295),
  ('expression -> LBRACKET expression_list RBRACKET','expression',3,'p_expression_array','sintactico.py',301),
  ('expression -> LBRACE set_or_map_contents RBRACE','expression',3,'p_expression_set_or_map','sintactico.py',307),
  ('set_or_map_contents -> expression set_or_map_tail','set_or_map_contents',2,'p_set_or_map_contents','sintactico.py',311),
  ('set_or_map_contents -> empty','set_or_map_contents',1,'p_set_or_map_contents','sintactico.py',312),
  ('set_or_map_tail -> COLON expression map_tail','set_or_map_tail',3,'p_set_or_map_tail','sintactico.py',327),
  ('set_or_map_tail -> set_tail','set_or_map_tail',1,'p_set_or_map_tail','sintactico.py',328),
  ('map_tail -> COMMA map_entries','map_tail',2,'p_map_tail','sintactico.py',335),
  ('map_tail -> empty','map_tail',1,'p_map_tail','sintactico.py',336),
  ('map_entries -> map_entries COMMA map_entry','map_entries',3,'p_map_entries','sintactico.py',340),
  ('map_entries -> map_entry','map_entries',1,'p_map_entries','sintactico.py',341),
  ('map_entry -> expression COLON expression','map_entry',3,'p_map_entry','sintactico.py',348),
  ('set_tail -> COMMA expression_list','set_tail',2,'p_set_tail','sintactico.py',352),
  ('set_tail -> empty','set_tail',1,'p_set_tail','sintactico.py',353),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','sintactico.py',357),
  ('expression_list -> expression','expression_list',1,'p_expression_list','sintactico.py',358),
  ('expression_list -> empty','expression_list',1,'p_expression_list','sintactico.py',359),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',370),
]
