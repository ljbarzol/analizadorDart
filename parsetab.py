
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftTIMESDIVIDEAND BOOL BREAK CASE CLASS COLON COMMA COMMENT CONST CONTINUE DIVEQ DIVIDE DOT DOUBLE ELSE EQEQ EQUALS EXTENDS FINAL FOR ID IF IMPLEMENTS IMPORT INT INTDIV LBRACE LBRACKET LPAREN MAIN MAXSIGN MAXSIGNEQ MINSIGN MINSIGNEQ MINUS MINUSEQ MODULE NEQ NOT NULLASSIGN NULLCOALESCING NUMBER OR PLUS PLUSEQ PRINT QMARK QMARK_DOT RBRACE RBRACKET RETURN RPAREN SEMICOLON SQUOTE STRING STRING_LITERAL SWITCH THEN TIMES TIMESEQ VAR VOID WHILEprogram : classes functions\n               | instructionsclasses : class classes\n               | emptyexpression : ID DOT ID LPAREN RPARENclass : CLASS ID LBRACE class_body RBRACEclass_body : class_member class_body\n                  | emptyclass_member : class_property\n                    | methodmethod : type ID LPAREN parameters RPAREN LBRACE body return_statement RBRACEclass_property : type ID SEMICOLONtype : INT\n            | DOUBLE\n            | STRING\n            | BOOL\n            | VOIDexpression : expression AND expression\n                  | expression OR expressionexpression : expression EQEQ expression\n                  | expression NEQ expression\n                  | expression MINSIGN expression\n                  | expression MAXSIGN expression\n                  | expression MINSIGNEQ expression\n                  | expression MAXSIGNEQ expressionexpression : NOT expressionexpression : expression PLUS expression\n                    | expression MINUS expression\n                    | expression TIMES expression\n                    | expression DIVIDE expressionexpression : termterm : factorfactor : NUMBERfactor : STRING_LITERALfactor : IDfactor : LPAREN expression RPARENinstructions : instruction instructionsinstructions : emptyinstruction : assignment\n                    | print_statement\n                    | if_elseassignment : ID EQUALS expression SEMICOLONassignment : type ID EQUALS expression SEMICOLONexpression : expression QMARK expression COLON expressionprint_statement : PRINT LPAREN expression RPAREN SEMICOLONparameters : type ID COMMA parameters\n                    | type ID\n                    | emptyreturn_statement : RETURN expression SEMICOLONfunction_with_return : type ID LPAREN parameters RPAREN LBRACE body return_statement RBRACEmain_function : VOID MAIN LPAREN RPAREN LBRACE body RBRACEfunction : function_with_return\n                | main_functionfunctions : function functions\n                 | emptybody : instructionsif_else : IF LPAREN expression RPAREN LBRACE instructions RBRACE ELSE LBRACE instructions RBRACEinstruction : WHILE LPAREN expression RPAREN LBRACE instructions RBRACEinstruction : FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE instructions RBRACEexpression : LBRACKET expression_list RBRACKETexpression_list : expression COMMA expression_list\n                        | expression\n                        | emptyempty :'
    
_lr_action_items = {'CLASS':([0,4,95,],[7,7,-6,]),'VOID':([0,2,4,5,6,9,10,11,23,25,26,29,30,36,43,58,61,63,64,67,95,115,116,117,118,119,122,123,124,131,132,138,143,145,149,151,152,155,159,160,],[21,28,-64,-4,21,-39,-40,-41,28,-52,-53,-3,-4,21,21,21,21,-9,-10,-42,-6,21,21,-43,-45,21,21,-12,21,21,21,-58,-51,21,21,21,-50,-59,-57,-11,]),'INT':([0,2,4,5,6,9,10,11,23,25,26,29,30,36,43,58,61,63,64,67,95,115,116,117,118,119,122,123,124,131,132,138,143,145,149,151,152,155,159,160,],[17,17,-64,-4,17,-39,-40,-41,17,-52,-53,-3,-4,17,17,17,17,-9,-10,-42,-6,17,17,-43,-45,17,17,-12,17,17,17,-58,-51,17,17,17,-50,-59,-57,-11,]),'DOUBLE':([0,2,4,5,6,9,10,11,23,25,26,29,30,36,43,58,61,63,64,67,95,115,116,117,118,119,122,123,124,131,132,138,143,145,149,151,152,155,159,160,],[18,18,-64,-4,18,-39,-40,-41,18,-52,-53,-3,-4,18,18,18,18,-9,-10,-42,-6,18,18,-43,-45,18,18,-12,18,18,18,-58,-51,18,18,18,-50,-59,-57,-11,]),'STRING':([0,2,4,5,6,9,10,11,23,25,26,29,30,36,43,58,61,63,64,67,95,115,116,117,118,119,122,123,124,131,132,138,143,145,149,151,152,155,159,160,],[19,19,-64,-4,19,-39,-40,-41,19,-52,-53,-3,-4,19,19,19,19,-9,-10,-42,-6,19,19,-43,-45,19,19,-12,19,19,19,-58,-51,19,19,19,-50,-59,-57,-11,]),'BOOL':([0,2,4,5,6,9,10,11,23,25,26,29,30,36,43,58,61,63,64,67,95,115,116,117,118,119,122,123,124,131,132,138,143,145,149,151,152,155,159,160,],[20,20,-64,-4,20,-39,-40,-41,20,-52,-53,-3,-4,20,20,20,20,-9,-10,-42,-6,20,20,-43,-45,20,20,-12,20,20,20,-58,-51,20,20,20,-50,-59,-57,-11,]),'$end':([0,1,2,3,4,5,6,9,10,11,22,23,24,25,26,29,30,31,32,40,67,95,117,118,138,143,152,155,159,],[-64,0,-64,-2,-64,-4,-64,-39,-40,-41,-1,-64,-55,-52,-53,-3,-4,-37,-38,-54,-42,-6,-43,-45,-58,-51,-50,-59,-57,]),'WHILE':([0,6,9,10,11,67,115,117,118,119,122,132,138,145,149,151,155,159,],[12,12,-39,-40,-41,-42,12,-43,-45,12,12,12,-58,12,12,12,-59,-57,]),'FOR':([0,6,9,10,11,67,115,117,118,119,122,132,138,145,149,151,155,159,],[13,13,-39,-40,-41,-42,13,-43,-45,13,13,13,-58,13,13,13,-59,-57,]),'ID':([0,6,7,9,10,11,14,17,18,19,20,21,27,28,34,35,36,38,39,46,47,49,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,91,114,115,116,117,118,119,122,126,132,138,145,148,149,151,155,159,],[8,8,33,-39,-40,-41,37,-13,-14,-15,-16,-17,41,-17,44,44,8,44,44,44,44,44,44,44,97,98,-42,44,44,44,44,44,44,44,44,44,44,44,44,44,120,44,8,8,-43,-45,8,8,44,8,-58,8,44,8,8,-59,-57,]),'PRINT':([0,6,9,10,11,67,115,117,118,119,122,132,138,145,149,151,155,159,],[15,15,-39,-40,-41,-42,15,-43,-45,15,15,15,-58,15,15,15,-59,-57,]),'IF':([0,6,9,10,11,67,115,117,118,119,122,132,138,145,149,151,155,159,],[16,16,-39,-40,-41,-42,16,-43,-45,16,16,16,-58,16,16,16,-59,-57,]),'RBRACE':([6,9,10,11,31,32,43,60,61,62,63,64,67,96,115,117,118,119,122,123,128,130,133,134,138,145,147,150,151,155,156,157,158,159,160,],[-64,-39,-40,-41,-37,-38,-64,95,-64,-8,-9,-10,-42,-7,-64,-43,-45,-64,-64,-12,138,140,143,-56,-58,-64,152,155,-64,-59,159,-49,160,-57,-11,]),'RETURN':([6,9,10,11,31,32,67,117,118,132,134,138,142,149,154,155,159,],[-64,-39,-40,-41,-37,-38,-42,-43,-45,-64,-56,-58,148,-64,148,-59,-57,]),'EQUALS':([8,37,],[34,55,]),'LPAREN':([12,13,15,16,34,35,38,39,41,42,46,47,49,54,55,67,68,69,70,71,72,73,74,75,76,77,78,79,80,97,98,114,117,126,148,],[35,36,38,39,46,46,46,46,58,59,46,46,46,46,46,-42,46,46,46,46,46,46,46,46,46,46,46,46,46,124,125,46,-43,46,46,]),'MAIN':([28,],[42,]),'LBRACE':([33,86,90,94,121,139,144,146,],[43,115,119,122,132,145,149,151,]),'NOT':([34,35,38,39,46,47,49,54,55,67,68,69,70,71,72,73,74,75,76,77,78,79,80,114,117,126,148,],[47,47,47,47,47,47,47,47,47,-42,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-43,47,47,]),'LBRACKET':([34,35,38,39,46,47,49,54,55,67,68,69,70,71,72,73,74,75,76,77,78,79,80,114,117,126,148,],[49,49,49,49,49,49,49,49,49,-42,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-43,49,49,]),'NUMBER':([34,35,38,39,46,47,49,54,55,67,68,69,70,71,72,73,74,75,76,77,78,79,80,114,117,126,148,],[51,51,51,51,51,51,51,51,51,-42,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-43,51,51,]),'STRING_LITERAL':([34,35,38,39,46,47,49,54,55,67,68,69,70,71,72,73,74,75,76,77,78,79,80,114,117,126,148,],[52,52,52,52,52,52,52,52,52,-42,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-43,52,52,]),'DOT':([44,],[66,]),'SEMICOLON':([44,45,48,50,51,52,82,87,88,89,97,99,100,101,102,103,104,105,106,107,108,109,110,112,113,136,137,153,],[-35,67,-31,-32,-33,-34,-26,116,117,118,123,-18,-19,-20,-21,-22,-23,-24,-25,-27,-28,-29,-30,-36,-60,-5,-44,157,]),'AND':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,68,-31,-32,-33,-34,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-27,-28,-29,-30,68,-36,-60,-5,68,68,]),'OR':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,69,-31,-32,-33,-34,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-27,-28,-29,-30,69,-36,-60,-5,69,69,]),'EQEQ':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,70,-31,-32,-33,-34,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-27,-28,-29,-30,70,-36,-60,-5,70,70,]),'NEQ':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,71,-31,-32,-33,-34,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-27,-28,-29,-30,71,-36,-60,-5,71,71,]),'MINSIGN':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,72,-31,-32,-33,-34,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-27,-28,-29,-30,72,-36,-60,-5,72,72,]),'MAXSIGN':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,73,-31,-32,-33,-34,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-27,-28,-29,-30,73,-36,-60,-5,73,73,]),'MINSIGNEQ':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,74,-31,-32,-33,-34,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-27,-28,-29,-30,74,-36,-60,-5,74,74,]),'MAXSIGNEQ':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,75,-31,-32,-33,-34,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-27,-28,-29,-30,75,-36,-60,-5,75,75,]),'PLUS':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,76,-31,-32,-33,-34,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-27,-28,-29,-30,76,-36,-60,-5,76,76,]),'MINUS':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,77,-31,-32,-33,-34,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-27,-28,-29,-30,77,-36,-60,-5,77,77,]),'TIMES':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,78,-31,-32,-33,-34,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-29,-30,78,-36,-60,-5,78,78,]),'DIVIDE':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,79,-31,-32,-33,-34,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-29,-30,79,-36,-60,-5,79,79,]),'QMARK':([44,45,48,50,51,52,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,153,],[-35,80,-31,-32,-33,-34,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-27,-28,-29,-30,80,-36,-60,-5,80,80,]),'RPAREN':([44,48,50,51,52,53,56,57,58,59,67,81,82,92,93,99,100,101,102,103,104,105,106,107,108,109,110,112,113,117,120,124,125,129,131,135,136,137,141,],[-35,-31,-32,-33,-34,86,89,90,-64,94,-42,112,-26,121,-48,-18,-19,-20,-21,-22,-23,-24,-25,-27,-28,-29,-30,-36,-60,-43,-47,-64,136,139,-64,144,-5,-44,-46,]),'COMMA':([44,48,50,51,52,82,84,99,100,101,102,103,104,105,106,107,108,109,110,112,113,120,136,137,],[-35,-31,-32,-33,-34,-26,114,-18,-19,-20,-21,-22,-23,-24,-25,-27,-28,-29,-30,-36,-60,131,-5,-44,]),'RBRACKET':([44,48,49,50,51,52,82,83,84,85,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,127,136,137,],[-35,-31,-64,-32,-33,-34,-26,113,-62,-63,-18,-19,-20,-21,-22,-23,-24,-25,-27,-28,-29,-30,-36,-60,-64,-61,-5,-44,]),'COLON':([44,48,50,51,52,82,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,136,137,],[-35,-31,-32,-33,-34,-26,-18,-19,-20,-21,-22,-23,-24,-25,-27,-28,-29,-30,126,-36,-60,-5,-44,]),'ELSE':([140,],[146,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'classes':([0,4,],[2,29,]),'instructions':([0,6,115,119,122,132,145,149,151,],[3,31,128,130,134,134,150,134,156,]),'class':([0,4,],[4,4,]),'empty':([0,2,4,6,23,43,49,58,61,114,115,119,122,124,131,132,145,149,151,],[5,24,30,32,24,62,85,93,62,85,32,32,32,93,93,32,32,32,32,]),'instruction':([0,6,115,119,122,132,145,149,151,],[6,6,6,6,6,6,6,6,6,]),'assignment':([0,6,36,115,116,119,122,132,145,149,151,],[9,9,54,9,129,9,9,9,9,9,9,]),'print_statement':([0,6,115,119,122,132,145,149,151,],[10,10,10,10,10,10,10,10,10,]),'if_else':([0,6,115,119,122,132,145,149,151,],[11,11,11,11,11,11,11,11,11,]),'type':([0,2,6,23,36,43,58,61,115,116,119,122,124,131,132,145,149,151,],[14,27,14,27,14,65,91,65,14,14,14,14,91,91,14,14,14,14,]),'functions':([2,23,],[22,40,]),'function':([2,23,],[23,23,]),'function_with_return':([2,23,],[25,25,]),'main_function':([2,23,],[26,26,]),'expression':([34,35,38,39,46,47,49,54,55,68,69,70,71,72,73,74,75,76,77,78,79,80,114,126,148,],[45,53,56,57,81,82,84,87,88,99,100,101,102,103,104,105,106,107,108,109,110,111,84,137,153,]),'term':([34,35,38,39,46,47,49,54,55,68,69,70,71,72,73,74,75,76,77,78,79,80,114,126,148,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'factor':([34,35,38,39,46,47,49,54,55,68,69,70,71,72,73,74,75,76,77,78,79,80,114,126,148,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'class_body':([43,61,],[60,96,]),'class_member':([43,61,],[61,61,]),'class_property':([43,61,],[63,63,]),'method':([43,61,],[64,64,]),'expression_list':([49,114,],[83,127,]),'parameters':([58,124,131,],[92,135,141,]),'body':([122,132,149,],[133,142,154,]),'return_statement':([142,154,],[147,158,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions','program',2,'p_program','sintactico.py',10),
  ('program -> instructions','program',1,'p_program','sintactico.py',11),
  ('classes -> class classes','classes',2,'p_classes','sintactico.py',19),
  ('classes -> empty','classes',1,'p_classes','sintactico.py',20),
  ('expression -> ID DOT ID LPAREN RPAREN','expression',5,'p_input_statement','sintactico.py',37),
  ('class -> CLASS ID LBRACE class_body RBRACE','class',5,'p_class_declaration','sintactico.py',42),
  ('class_body -> class_member class_body','class_body',2,'p_class_body','sintactico.py',46),
  ('class_body -> empty','class_body',1,'p_class_body','sintactico.py',47),
  ('class_member -> class_property','class_member',1,'p_class_member','sintactico.py',54),
  ('class_member -> method','class_member',1,'p_class_member','sintactico.py',55),
  ('method -> type ID LPAREN parameters RPAREN LBRACE body return_statement RBRACE','method',9,'p_method','sintactico.py',59),
  ('class_property -> type ID SEMICOLON','class_property',3,'p_class_property','sintactico.py',63),
  ('type -> INT','type',1,'p_type','sintactico.py',67),
  ('type -> DOUBLE','type',1,'p_type','sintactico.py',68),
  ('type -> STRING','type',1,'p_type','sintactico.py',69),
  ('type -> BOOL','type',1,'p_type','sintactico.py',70),
  ('type -> VOID','type',1,'p_type','sintactico.py',71),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','sintactico.py',78),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','sintactico.py',79),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_relational','sintactico.py',83),
  ('expression -> expression NEQ expression','expression',3,'p_expression_relational','sintactico.py',84),
  ('expression -> expression MINSIGN expression','expression',3,'p_expression_relational','sintactico.py',85),
  ('expression -> expression MAXSIGN expression','expression',3,'p_expression_relational','sintactico.py',86),
  ('expression -> expression MINSIGNEQ expression','expression',3,'p_expression_relational','sintactico.py',87),
  ('expression -> expression MAXSIGNEQ expression','expression',3,'p_expression_relational','sintactico.py',88),
  ('expression -> NOT expression','expression',2,'p_expression_not','sintactico.py',92),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaria','sintactico.py',96),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaria','sintactico.py',97),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaria','sintactico.py',98),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaria','sintactico.py',99),
  ('expression -> term','expression',1,'p_expression_term','sintactico.py',103),
  ('term -> factor','term',1,'p_term_factor','sintactico.py',107),
  ('factor -> NUMBER','factor',1,'p_factor_number','sintactico.py',111),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','sintactico.py',115),
  ('factor -> ID','factor',1,'p_factor_id','sintactico.py',119),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr_group','sintactico.py',123),
  ('instructions -> instruction instructions','instructions',2,'p_instructions_multiple','sintactico.py',128),
  ('instructions -> empty','instructions',1,'p_instructions_empty','sintactico.py',132),
  ('instruction -> assignment','instruction',1,'p_instruction','sintactico.py',136),
  ('instruction -> print_statement','instruction',1,'p_instruction','sintactico.py',137),
  ('instruction -> if_else','instruction',1,'p_instruction','sintactico.py',138),
  ('assignment -> ID EQUALS expression SEMICOLON','assignment',4,'p_assignment','sintactico.py',143),
  ('assignment -> type ID EQUALS expression SEMICOLON','assignment',5,'p_assignment_typed','sintactico.py',147),
  ('expression -> expression QMARK expression COLON expression','expression',5,'p_expression_ternary','sintactico.py',151),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','sintactico.py',157),
  ('parameters -> type ID COMMA parameters','parameters',4,'p_parameters','sintactico.py',162),
  ('parameters -> type ID','parameters',2,'p_parameters','sintactico.py',163),
  ('parameters -> empty','parameters',1,'p_parameters','sintactico.py',164),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','sintactico.py',174),
  ('function_with_return -> type ID LPAREN parameters RPAREN LBRACE body return_statement RBRACE','function_with_return',9,'p_function_with_return','sintactico.py',181),
  ('main_function -> VOID MAIN LPAREN RPAREN LBRACE body RBRACE','main_function',7,'p_main_function','sintactico.py',185),
  ('function -> function_with_return','function',1,'p_function','sintactico.py',189),
  ('function -> main_function','function',1,'p_function','sintactico.py',190),
  ('functions -> function functions','functions',2,'p_functions','sintactico.py',195),
  ('functions -> empty','functions',1,'p_functions','sintactico.py',196),
  ('body -> instructions','body',1,'p_body','sintactico.py',203),
  ('if_else -> IF LPAREN expression RPAREN LBRACE instructions RBRACE ELSE LBRACE instructions RBRACE','if_else',11,'p_if_else','sintactico.py',212),
  ('instruction -> WHILE LPAREN expression RPAREN LBRACE instructions RBRACE','instruction',7,'p_while_loop','sintactico.py',217),
  ('instruction -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE instructions RBRACE','instruction',10,'p_for_loop','sintactico.py',222),
  ('expression -> LBRACKET expression_list RBRACKET','expression',3,'p_expression_array','sintactico.py',228),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','sintactico.py',232),
  ('expression_list -> expression','expression_list',1,'p_expression_list','sintactico.py',233),
  ('expression_list -> empty','expression_list',1,'p_expression_list','sintactico.py',234),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',245),
]
